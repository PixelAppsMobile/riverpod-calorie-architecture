// Mocks generated by Mockito 5.1.0 from annotations
// in totaltest/main.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i9;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;
import 'package:state_notifier/state_notifier.dart' as _i12;
import 'package:totaltest/core/result_type.dart' as _i8;
import 'package:totaltest/data/helper/prefs_helper/shared_prefs_helper.dart'
    as _i5;
import 'package:totaltest/data/repo/auth_repo/auth_repo_impl.dart' as _i7;
import 'package:totaltest/domain/models/app_user.dart' as _i3;
import 'package:totaltest/domain/providers/user_provider.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSharedPreferences_0 extends _i1.Fake
    implements _i2.SharedPreferences {}

class _FakeAppUser_1 extends _i1.Fake implements _i3.AppUser {}

class _FakeEither_2<L, R> extends _i1.Fake implements _i4.Either<L, R> {}

/// A class which mocks [SharedPreferenceHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferenceHelper extends _i1.Mock
    implements _i5.SharedPreferenceHelper {
  MockSharedPreferenceHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakeSharedPreferences_0()) as _i2.SharedPreferences);
  @override
  set preferences(_i2.SharedPreferences? _preferences) =>
      super.noSuchMethod(Invocation.setter(#preferences, _preferences),
          returnValueForMissingStub: null);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  _i6.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  _i6.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  _i6.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
}

/// A class which mocks [AuthRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepoImpl extends _i1.Mock implements _i7.AuthRepoImpl {
  MockAuthRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AppUser getAppUser() =>
      (super.noSuchMethod(Invocation.method(#getAppUser, []),
          returnValue: _FakeAppUser_1()) as _i3.AppUser);
  @override
  _i6.Future<_i4.Either<_i8.AppError, _i9.User>> signInUsingCustomToken(
          String? customToken) =>
      (super.noSuchMethod(
              Invocation.method(#signInUsingCustomToken, [customToken]),
              returnValue: Future<_i4.Either<_i8.AppError, _i9.User>>.value(
                  _FakeEither_2<_i8.AppError, _i9.User>()))
          as _i6.Future<_i4.Either<_i8.AppError, _i9.User>>);
  @override
  _i6.Future<void> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i4.Either<_i8.AppError, _i8.AppSuccess>> updateCalorieLimit(
          double? calories, String? uid) =>
      (super.noSuchMethod(
          Invocation.method(#updateCalorieLimit, [calories, uid]),
          returnValue: Future<_i4.Either<_i8.AppError, _i8.AppSuccess>>.value(
              _FakeEither_2<_i8.AppError, _i8.AppSuccess>())) as _i6
          .Future<_i4.Either<_i8.AppError, _i8.AppSuccess>>);
}

/// A class which mocks [UserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProvider extends _i1.Mock implements _i10.UserProvider {
  @override
  set onError(_i11.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i6.Stream<_i3.AppUser?> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i3.AppUser?>.empty()) as _i6.Stream<_i3.AppUser?>);
  @override
  set state(_i3.AppUser? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<_i4.Either<_i8.AppError, _i8.AppSuccess>> signIn(
          String? customToken) =>
      (super.noSuchMethod(Invocation.method(#signIn, [customToken]),
          returnValue: Future<_i4.Either<_i8.AppError, _i8.AppSuccess>>.value(
              _FakeEither_2<_i8.AppError, _i8.AppSuccess>())) as _i6
          .Future<_i4.Either<_i8.AppError, _i8.AppSuccess>>);
  @override
  _i6.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i4.Either<_i8.AppError, _i8.AppSuccess>> updateCalorieLimit(
          double? limit) =>
      (super.noSuchMethod(Invocation.method(#updateCalorieLimit, [limit]),
          returnValue: Future<_i4.Either<_i8.AppError, _i8.AppSuccess>>.value(
              _FakeEither_2<_i8.AppError, _i8.AppSuccess>())) as _i6
          .Future<_i4.Either<_i8.AppError, _i8.AppSuccess>>);
  @override
  bool updateShouldNotify(_i3.AppUser? old, _i3.AppUser? current) => (super
      .noSuchMethod(Invocation.method(#updateShouldNotify, [old, current]),
          returnValue: false) as bool);
  @override
  _i11.RemoveListener addListener(_i12.Listener<_i3.AppUser?>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i11.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
