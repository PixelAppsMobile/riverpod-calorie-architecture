// Mocks generated by Mockito 5.3.2 from annotations
// in totaltest/main.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;
import 'package:totaltest/core/result_type.dart' as _i8;
import 'package:totaltest/data/data_sources/local/storage/local_storage_data_source_impl.dart'
    as _i5;
import 'package:totaltest/data/dto/base_user_dto.dart' as _i9;
import 'package:totaltest/data/repositories/authentication/auth_repo_impl.dart'
    as _i7;
import 'package:totaltest/data/repositories/food_consumption/food_consumption_repo_impl.dart'
    as _i10;
import 'package:totaltest/domain/entities/base_user.dart' as _i4;
import 'package:totaltest/domain/entities/food_entry.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$BaseUserCopyWith_2<$Res> extends _i1.SmartFake
    implements _i4.$BaseUserCopyWith<$Res> {
  _Fake$BaseUserCopyWith_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorageDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageDataSourceImpl extends _i1.Mock
    implements _i5.LocalStorageDataSourceImpl {
  MockLocalStorageDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#preferences),
        ),
      ) as _i2.SharedPreferences);
  @override
  set preferences(_i2.SharedPreferences? _preferences) => super.noSuchMethod(
        Invocation.setter(
          #preferences,
          _preferences,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);
  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);
  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);
  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);
}

/// A class which mocks [AuthRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepoImpl extends _i1.Mock implements _i7.AuthRepoImpl {
  MockAuthRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i8.AppError, _i9.BaseUserDto>> signInUsingCustomToken(
          String? customToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUsingCustomToken,
          [customToken],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i8.AppError, _i9.BaseUserDto>>.value(
                _FakeEither_1<_i8.AppError, _i9.BaseUserDto>(
          this,
          Invocation.method(
            #signInUsingCustomToken,
            [customToken],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, _i9.BaseUserDto>>);
  @override
  _i6.Future<_i3.Either<_i8.AppError, _i8.AppSuccess>> logOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i8.AppError, _i8.AppSuccess>>.value(
            _FakeEither_1<_i8.AppError, _i8.AppSuccess>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, _i8.AppSuccess>>);
}

/// A class which mocks [FoodConsumptionRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodConsumptionRepoImpl extends _i1.Mock
    implements _i10.FoodConsumptionRepoImpl {
  MockFoodConsumptionRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: '',
      ) as String);
  @override
  _i6.Future<_i3.Either<_i8.AppError, _i11.FoodEntry>> addFoodEntry(
    _i11.FoodEntry? entry, {
    String? overrideUid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFoodEntry,
          [entry],
          {#overrideUid: overrideUid},
        ),
        returnValue: _i6.Future<_i3.Either<_i8.AppError, _i11.FoodEntry>>.value(
            _FakeEither_1<_i8.AppError, _i11.FoodEntry>(
          this,
          Invocation.method(
            #addFoodEntry,
            [entry],
            {#overrideUid: overrideUid},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, _i11.FoodEntry>>);
  @override
  _i6.Future<_i3.Either<_i8.AppError, List<_i11.FoodEntry>>> getFoodEntries(
          {String? overrideUid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodEntries,
          [],
          {#overrideUid: overrideUid},
        ),
        returnValue:
            _i6.Future<_i3.Either<_i8.AppError, List<_i11.FoodEntry>>>.value(
                _FakeEither_1<_i8.AppError, List<_i11.FoodEntry>>(
          this,
          Invocation.method(
            #getFoodEntries,
            [],
            {#overrideUid: overrideUid},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, List<_i11.FoodEntry>>>);
  @override
  _i6.Future<_i3.Either<_i8.AppError, void>> updateFoodEntry(
    _i11.FoodEntry? entry, {
    String? overrideUid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFoodEntry,
          [entry],
          {#overrideUid: overrideUid},
        ),
        returnValue: _i6.Future<_i3.Either<_i8.AppError, void>>.value(
            _FakeEither_1<_i8.AppError, void>(
          this,
          Invocation.method(
            #updateFoodEntry,
            [entry],
            {#overrideUid: overrideUid},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, void>>);
  @override
  _i6.Future<_i3.Either<_i8.AppError, void>> deleteFoodEntry(
    _i11.FoodEntry? entry, {
    String? overrideUid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFoodEntry,
          [entry],
          {#overrideUid: overrideUid},
        ),
        returnValue: _i6.Future<_i3.Either<_i8.AppError, void>>.value(
            _FakeEither_1<_i8.AppError, void>(
          this,
          Invocation.method(
            #deleteFoodEntry,
            [entry],
            {#overrideUid: overrideUid},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, void>>);
  @override
  _i6.Future<_i3.Either<_i8.AppError, _i8.AppSuccess>> updateCalorieLimit(
    double? calories,
    String? uid,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCalorieLimit,
          [
            calories,
            uid,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i8.AppError, _i8.AppSuccess>>.value(
            _FakeEither_1<_i8.AppError, _i8.AppSuccess>(
          this,
          Invocation.method(
            #updateCalorieLimit,
            [
              calories,
              uid,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i8.AppError, _i8.AppSuccess>>);
}

/// A class which mocks [BaseUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseUser extends _i1.Mock implements _i4.BaseUser {
  MockBaseUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: '',
      ) as String);
  @override
  _i4.$BaseUserCopyWith<_i4.BaseUser> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$BaseUserCopyWith_2<_i4.BaseUser>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i4.$BaseUserCopyWith<_i4.BaseUser>);
}
